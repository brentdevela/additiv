import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import { fetchEmployeeTree } from './employeeExplorerAPI';
import {isEmpty} from "lodash";

const initialState = {
    status: 'idle',
    name: '',
    employees: {},
};

export const fetchEmployeeAsync = createAsyncThunk(
    'employeeExplorer/fetchEmployee',
    async (name) => {
        let employees = {};

        for await (const employee of fetchEmployeeTree(name)) {
            employees[employee.name] = employee;
            if (isEmpty(employee)) {
                break;
            }
        }

        return employees;
    }
);

export const employeeExplorerSlice = createSlice({
    name: 'employeeExplorer',
    initialState,
    // The `reducers` field lets us define reducers and generate associated actions
    reducers: {
        setName: (state, action) => {
            state.name = action.payload;
        }
    },
    // The `extraReducers` field lets the slice handle actions defined elsewhere,
    // including actions generated by createAsyncThunk or in other slices.
    extraReducers: (builder) => {
        builder
            .addCase(fetchEmployeeAsync.pending, (state) => {
                state.status = 'loading';
            })
            .addCase(fetchEmployeeAsync.fulfilled, (state, action) => {
                state.status = 'idle';
                state.employees = action.payload;
            })
            .addCase(fetchEmployeeAsync.rejected, (state, action) => {
                state.status = 'invalid';
                state.details = {};
            });
    },
});

export const { setName } = employeeExplorerSlice.actions;

export const selectStatus = (state) => state.employeeExplorer.status;
export const selectName = (state) => state.employeeExplorer.name;
export const selectEmployees = (state) => state.employeeExplorer.employees;

export default employeeExplorerSlice.reducer;